@page "/Profile"
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>MyProfile</h1>
<div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>
<div>
    <h2>My Account</h2>
    <p>
        <a href="#">
            Edit My Profile
        </a>
    </p>
</div>
@if(approved?.Count > 0)
{
    <div>
        <h2>Approved Suggestions</h2>
        <p>These are your suggestion that are currently active.</p>

        @foreach (var s in approved)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>
                @s.DateCreated.ToString("Mm.dd.yyyy")
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                TotalVotes:@s.UserVotes.Count
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionsStatus is not null)
            {
                <div>
                    @s.SuggestionsStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}
@if (archived?.Count > 0)
{
    <div>
        <h2>Archived Suggestions</h2>
        <p>These are your suggestion that were active out did not gain enough attention.</p>

        @foreach (var s in archived)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>
                @s.DateCreated.ToString("Mm.dd.yyyy")
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                TotalVotes:@s.UserVotes.Count
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionsStatus is not null)
            {
                <div>
                    @s.SuggestionsStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}
@if (pending?.Count > 0)
{
    <div>
        <h2>Pending Suggestions</h2>
        <p>These suggestion are not reviewed by the administrators.</p>

        @foreach (var s in pending)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>
                @s.DateCreated.ToString("Mm.dd.yyyy")
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                TotalVotes:@s.UserVotes.Count
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionsStatus is not null)
            {
                <div>
                    @s.SuggestionsStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}
@if (rejected?.Count > 0)
{
    <div>
        <h2>Rejected Suggestions</h2>
        <p>These suggestions were not deemed to be appropriate for the training suggestion site.</p>

        @foreach (var s in rejected)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>
                @s.DateCreated.ToString("Mm.dd.yyyy")
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                TotalVotes:@s.UserVotes.Count
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionsStatus is not null)
            {
                <div>
                    @s.SuggestionsStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> submissions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> archived;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> rejected;

    protected async override Task OnInitializedAsync()
    {
        //TODO -Replace with user lookup
        loggedInUser=await userData.GetUsersFromAuthentication("abc-123");
        var results = await suggestionData.GetUsersSuggestions(loggedInUser.Id);
        if(loggedInUser is not null && results is not null)
        {
            submissions = results.OrderByDescending(sug => sug.DateCreated).ToList();
            approved = submissions.Where(sug => sug.ApprovedForRelease && sug.Archived == false && sug.Rejected == false).ToList();
            archived = submissions.Where(sug => sug.Archived && sug.Rejected == false).ToList();
            pending = submissions.Where(sug => sug.ApprovedForRelease == false && sug.Rejected == false).ToList();
            rejected = submissions.Where(sug => sug.Rejected).ToList();
        }

    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
