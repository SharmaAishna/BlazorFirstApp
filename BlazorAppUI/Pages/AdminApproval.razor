@page "/AdminApproval"
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>Pending Submissions</h1>

<div>
    <div>@submissions?.Count Submissions</div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>
@if(submissions is not null)
{
    foreach(var s in submissions)
    {
        <div>
            <div>
                <button @onclick="(()=> ApproveSubmission(s))">Approve</button>
                <button @onclick="(()=> RejectSubmission(s))">Reject</button>
            </div>
        </div>
        <div>
            @if(currentEditingTitle == s.Id)
            {
                <EditForm Model="@editedTitle" OnSubmit="(()=> SaveTitle(s))">
                    <InputText @bind-Value="editedTitle"/>
                    <button type="submit">
                        <span class="oi oi-check"></span>
                    </button>
                    <button @onclick="(()=>currentEditingTitle=string.Empty)">
                        <span class="oi oi-check"></span>
                    </button>
                </EditForm>
            }
        </div>
    }
}

@code {
    private List<SuggestionModel> submissions;
    private SuggestionModel editingModel;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string editedDescription = "";

    protected async override Task OnInitializedAsync()
    {
        submissions = await suggestionData.GetAllSuggestionWaitingForApproval();
    }
    private async Task ApproveSubmission(SuggestionModel submission)
    {
        submission.ApprovedForRelease = true;
        submissions.Remove(submission);
        await suggestionData.UpdateSuggestion(submission);
    }
    private async Task RejectSubmission(SuggestionModel submission)
    {
        submission.Rejected = true;
        submissions.Remove(submission);
        await suggestionData.UpdateSuggestion(submission);
    }
    private void EditTitle(SuggestionModel model)
    {
        editingModel = model;
        editedTitle = model.Suggestion;
        currentEditingTitle = model.Id;
        currentEditingTitle = "";
    }
    private async Task SaveTitle(SuggestionModel model)
    {
        currentEditingTitle = string.Empty;
        model.Suggestion = editedTitle;
        await suggestionData.UpdateSuggestion(model);
    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
