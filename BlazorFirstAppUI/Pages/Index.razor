@page "/"

@inject ICategoryData categoryData
@inject IUserData userData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
<h1>Suggestions</h1>
<div>
    <button>Suggest</button>
</div>
<div>
    <div>@suggestions?.Count Suggestions</div>
    <div>
    <button @onclick="(()=>OrderBynew(true))">New</button>
    <button @onclick="(()=>OrderBynew(false))">Popular</button>
    </div>
    <div>
        <input type="text" placelder="Search" aria-label="Search box" 
        @oninput="((txt) => OnsearchInput((string)txt.Value))"/>
    </div>
</div>
<div>
    <div>
    @if(suggestions is not null)
    {
      <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
          <div>
              <div>
                  <div>@GetUpvoteTopText(s)</div>
                  <span class="oi oi-caret-top"></span>
                  <div>@GetUpVoteBottomtext(s)</div>
              </div>
              <div>
                  <div @onclick="(()=> OpenDetails(s))">
                      @s.Suggestion
                  </div>
                  <div>
                      <div @onclick="(()=> OpenDetails(s))">
                          @s.Category?.CategoryName
                      </div>
                  </div>
              </div>
              <div>
                  @s.SuggestionsStatus?.StatusName
              </div>
          </div>
      </Virtualize>
    }
    </div>
</div>
@code{
    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
    }
    protected  async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }
    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ?boolResults.Value : true;

    }
    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }
    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestions();
        if(selectedCategory !="All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }
        if(selectedStatus !="All")
        {
            output = output.Where(s => s.SuggestionsStatus?.StatusName == selectedStatus).ToList();
        }
        if(string.IsNullOrEmpty(searchText)==false)
        {
            output = output.Where(s => s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
            s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        if(isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
            .ThenByDescending(s => s.DateCreated).ToList();
        }
        suggestions = output;
        await SaveFilterState();
    }
    private async Task OrderBynew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }
    private async Task OnsearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }
    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }
    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }
    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count>0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            return "Click To ";
        }
    }
    private string GetUpVoteBottomtext(SuggestionModel suggestion)
    {
        if(suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }
    private void OpenDetails(SuggestionModel suggestion) 
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }
}